#Aplicaci√≥n de la Recursividad 

# Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

try: # Solicitar al usuario un n√∫mero
    numero = int(input("Introduce un n√∫mero entero positivo: "))
    if numero < 1:
        print("El n√∫mero debe ser mayor o igual a 1.")
    else:
        print(f"\nFactoriales del 1 al {numero}:")
        for i in range(1, numero + 1):
            print(f"{i}! = {factorial(i)}")
except ValueError:
    print("Entrada no v√°lida. Debes introducir un n√∫mero entero.")

# Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
# especifique.

# Funci√≥n recursiva para calcular el n√∫mero de Fibonacci en la posici√≥n n
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

try: # Solicitar al usuario una posici√≥n
    posicionF = int(input("Introduce una posici√≥n entera no negativa: "))
    if posicionF < 0:
        print("La posici√≥n debe ser un n√∫mero entero no negativo.")
    else:
        print(f"\nSerie de Fibonacci hasta la posici√≥n {posicionF}:")
        for i in range(posicionF + 1):
            print(f"F({i}) = {fibonacci(i)}")
except ValueError:
    print("Entrada no v√°lida. Debes introducir un n√∫mero entero.")

# Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
# exponente, utilizando la f√≥rmula ùëõ
# ùëö = ùëõ ‚àó ùëõ
# (ùëö‚àí1)
# . Prueba esta funci√≥n en un
# algoritmo general.

# Funci√≥n recursiva para calcular la potencia
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)


try: # Algoritmo general para probar la funci√≥n
    base = float(input("Introduce la base: "))
    exponente = int(input("Introduce el exponente (entero no negativo): "))
    
    if exponente < 0:
        print("El exponente debe ser un n√∫mero entero no negativo.")
    else:
        resultado = potencia(base, exponente)
        print(f"\n{base}^{exponente} = {resultado}")
except ValueError:
    print("Entrada no v√°lida. Aseg√∫rate de introducir n√∫meros v√°lidos.")


# Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
# decimal y devuelva su representaci√≥n en binario como una cadena de texto.

# Funci√≥n recursiva para convertir un n√∫mero decimal a binario
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)


try: # Algoritmo para solicitar un n√∫mero y mostrar el resultado
    num = int(input("Introduce un n√∫mero entero positivo: "))
    if num < 0:
        print("Por favor, introduce un n√∫mero entero positivo.")
    elif num == 0:
        print("0 en binario es: 0")
    else:
        binario = decimal_a_binario(num)
        print(f"{num} en binario es: {binario}")
except ValueError:
    print("Entrada no v√°lida. Debes introducir un n√∫mero entero.")

# Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
# lo es.
#  Requisitos:
# La soluci√≥n debe ser recursiva.
# No se debe usar [::-1] ni la funci√≥n reversed().

# Funci√≥n recursiva para verificar si una palabra es pal√≠ndromo
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

# Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#  Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
# Ejemplos:
# suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
# suma_digitos(9) ‚Üí 9
# suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

# Funci√≥n recursiva para sumar los d√≠gitos de un n√∫mero
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
# bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
# √∫ltimo nivel con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
# pir√°mide.
#  Ejemplos:
# contar_bloques(1) ‚Üí 1 (1)
# contar_bloques(2) ‚Üí 3 (2 + 1)
# contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)

# Funci√≥n recursiva para contar el total de bloques necesarios para construir la pir√°mide
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)
    
# Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.
#  Ejemplos:
# contar_digito(12233421, 2) ‚Üí 3
# contar_digito(5555, 5) ‚Üí 4
# contar_digito(123456, 7) ‚Üí 0

# Funci√≥n recursiva para contar cu√°ntas veces aparece un d√≠gito en un n√∫mero
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        coincidencia = 1 if numero % 10 == digito else 0
        return coincidencia + contar_digito(numero // 10, digito)

